from dataclasses import dataclass, field # Added field
from typing import Optional # Added Optional
from marshmallow import Schema, fields, post_load

from openfabric_pysdk.fields import Resource # Keep if needed, though not used in these new fields
from openfabric_pysdk.utility import SchemaUtil


################################################################
# Output concept class - AUTOGENERATED (but we're modifying it)
################################################################
@dataclass
class OutputClass:
    original_prompt: Optional[str] = None
    expanded_prompt: Optional[str] = None
    image_path: Optional[str] = None
    model_3d_path: Optional[str] = None
    status_message: Optional[str] = None
    # Remove or keep 'message' field based on whether it's still needed.
    # For clarity, let's remove the old 'message' field if status_message covers its role.
    # message: Optional[str] = None # Old field, to be replaced by status_message


################################################################
# OutputSchema concept class - AUTOGENERATED (but we're modifying it)
################################################################
class OutputClassSchema(Schema):
    original_prompt = fields.String(allow_none=True)
    expanded_prompt = fields.String(allow_none=True)
    image_path = fields.String(allow_none=True)
    model_3d_path = fields.String(allow_none=True)
    status_message = fields.String(allow_none=True)
    # message = fields.Str(allow_none=True) # Old field

    @post_load
    def create(self, data, **kwargs):
        return SchemaUtil.create(OutputClass(), data)
